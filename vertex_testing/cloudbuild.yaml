logsBucket: gs://logstoragecicd
steps:
# Step 1: Authenticate with Google Cloud (Cloud Build does this automatically)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Authenticating with Google Cloud..."
      gcloud auth configure-docker

# Step 2: Build Docker Image
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'build',
      '-t',
      'gcr.io/airquality-438719/vertex-training-image:latest',
      '-f',
      './vertex_testing/Dockerfile',
      './vertex_testing'
    ]

# Step 3: Push Docker Image to GCR
- name: 'gcr.io/cloud-builders/docker'
  args:
    ['push', 'gcr.io/airquality-438719/vertex-training-image:latest']

# Step 4: Upload the Model to Vertex AI
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'upload_model'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Uploading model to Vertex AI..."
      gcloud ai models upload \
        --region=us-central1 \
        --display-name=pm25-model \
        --container-image-uri=gcr.io/airquality-438719/vertex-training-image:latest

      echo "Model uploaded. Querying the most recent MODEL_ID..."
      MODEL_ID=$(gcloud ai models list \
        --region=us-central1 \
        --filter="display_name=pm25-model" \
        --format="value(name)" \
        --sort-by="~updateTime" | head -n 1)

      if [ -z "$MODEL_ID" ]; then
        echo "ERROR: MODEL_ID is empty. Exiting workflow."
        exit 1
      fi

      echo "MODEL_ID=$MODEL_ID"
      echo "MODEL_ID=$MODEL_ID" >> /workspace/env_vars

# Step 5: Create or Reuse Endpoint
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'create_endpoint'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Checking for existing endpoint..."
      ENDPOINT_NAME=$(gcloud ai endpoints list \
        --region=us-central1 \
        --filter="display_name='pm25-endpoint'" \
        --format="value(name)")

      if [ -z "$ENDPOINT_NAME" ]; then
        echo "No existing endpoint found. Creating a new one..."
        ENDPOINT_NAME=$(gcloud ai endpoints create \
          --region=us-central1 \
          --display-name=pm25-endpoint \
          --format="value(name)")
      fi

      if [ -z "$ENDPOINT_NAME" ]; then
        echo "ERROR: Failed to create or retrieve endpoint. Exiting workflow."
        exit 1
      fi

      echo "ENDPOINT_NAME=$ENDPOINT_NAME"
      echo "ENDPOINT_NAME=$ENDPOINT_NAME" >> /workspace/env_vars

# Step 6: Deploy Model to Endpoint
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: 'deploy_model'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      source /workspace/env_vars
      echo "Deploying model $MODEL_ID to endpoint $ENDPOINT_NAME..."
      gcloud ai endpoints deploy-model $ENDPOINT_NAME \
        --region=us-central1 \
        --model=$MODEL_ID \
        --display-name=pm25-model-deployment \
        --machine-type=n1-standard-4 \
        --traffic-split=0=100